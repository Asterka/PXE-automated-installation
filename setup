#!/bin/bash
#mkdir server
#chmod -R 777 server

#Load official ubuntu images
#-------------------

wget http://archive.ubuntu.com/ubuntu/dists/trusty/main/uefi/grub2-amd64/current/grubnetx64.efi.signed

wget http://archive.ubuntu.com/ubuntu/dists/bionic-updates/main/installer-amd64/current/images/netboot/netboot.tar.gz

mkdir netboot_arm
mkdir netboot_amd

tar -xvzf netboot.tar.gz -C netboot_amd

rm netboot.tar.gz

wget http://ports.ubuntu.com/ubuntu-ports/dists/bionic-updates/main/installer-arm64/current/images/netboot/netboot.tar.gz

tar -xvzf netboot.tar.gz -C netboot_arm

rm netboot.tar.gz

chmod 777 netboot_arm

chmod 777 netboot_amd

chmod  -R 777 ../docker-images

mkdir ./pxe-master
mkdir ./pxe-master/server
mkdir ./pxe-master/server_arm
#------Uefi section ------

mkdir grub
mkdir shim

chmod 777 grub
chmod 777 shim

apt-get download shim.signed

wget http://archive.ubuntu.com/ubuntu/dists/bionic/main/uefi/grub2-amd64/current/grubnetx64.efi

#dpkg -x  grub-*.deb grub
#dpkg -x shim-*.deb shim

#cp ./shim/usr/lib/shim/shimx64.efi.signed ./pxe-master/bootx64.efi
cp grubnetx64.efi.signed ./pxe-master/grubx64.efi

#-------------------

wget https://raw.githubusercontent.com/Asterka/PXE-automated-installation/master/default

wget https://raw.githubusercontent.com/Asterka/PXE-automated-installation/master/Dockerfile

wget https://raw.githubusercontent.com/Asterka/PXE-automated-installation/master/grub.cfg

chmod 777 Dockerfile

cp Dockerfile ./pxe-master

wget https://raw.githubusercontent.com/Asterka/PXE-automated-installation/master/dnsmasq2.conf

chmod 777 default

netplan generate 

echo "network:
  version: 2
  renderer: NetworkManager
  ethernets:
      $1:
        dhcp4: no
        dhcp6: no
        addresses: [192.168.0.155/24, ]
        gateway4:  192.168.0.1
        nameservers:
          addresses: [8.8.8.8, 8.8.4.4]
" >> /etc/netplan/01-network-manager-all.yaml 

netplan apply

#sed -i "s/kek/$(ip -f inet addr show $1 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')/g" default

chmod 777 dnsmasq2.conf

sed -i "s/interface_name/$1/g" dnsmasq2.conf

#sed -i "s/kek/$(ip -f inet addr show $1 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')/g" dnsmasq2.conf

cp grubnetx64.efi.signed ./pxe-master/

cp grub.cfg ./pxe-master/

ls ./pxe-master/

cp default ./pxe-master

cp dnsmasq2.conf ./pxe-master

cp -r netboot_amd/* ./pxe-master/server

#Stop all the running containers, as they might occupy the necessary ports
#This might not be an excellent idea, but I haven't really thought of any other approaches

docker stop $(docker ps -a -q)

#In case you want to include some extra files you might want to use this apache server

#cd apache

#docker build --no-cache=true -t my-apache2 .

chmod -R 777 .

cd pxe-master

docker build --no-cache=true -t pxe_image .

docker run --net host --cap-add NET_ADMIN pxe_image
